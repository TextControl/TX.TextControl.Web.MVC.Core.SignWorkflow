@model SignData

@using TXTextControl.Web.MVC.DocumentViewer
@using System.Text

<div style="width: 800px; height: 600px;">

	@Html.TXTextControl().DocumentViewer(settings => {
	settings.DocumentData = Convert.ToBase64String(Model.document);
	settings.Dock = DocumentViewerSettings.DockStyle.Fill;
	settings.SignatureSettings = new SignatureSettings() {
		SignerName = Model.formData.patient.Firstname + " " + Model.formData.patient.Name,
OwnerName = "Greenwals",
ShowSignatureBar = true,
	SignerInitials = Model.formData.patient.Firstname.Substring(0,1) + Model.formData.patient.Name.Substring(0,1),
	RedirectUrlAfterSignature = this.Url.Action("ExportPDF", "Home", null, Context.Request.Scheme, Context.Request.Host.ToString()),
	SignatureBoxes = new SignatureBox[] {
	new SignatureBox("txsign") { SigningRequired = true, Style = SignatureBox.SignatureBoxStyle.Signature },
	new SignatureBox("txsign_init") { SigningRequired = true, Style = SignatureBox.SignatureBoxStyle.Initials }}
	};
	}).Render()

</div>

	<script>
		window.addEventListener("documentViewerLoaded", function () {
			TXDocumentViewer.signatures.setSubmitCallback(exportPDF);
		});

	function exportPDF(data) {

		$("#signatureModal").modal('hide');

		// create temporary link to download document
		var element = document.createElement('a');
		element.setAttribute('href', 'data:application/octet-stream;base64,' + data);
		element.setAttribute('download', "result.pdf");

		element.style.display = 'none';
		document.body.appendChild(element);

		// simulate click
		element.click();

		// remove the link
		document.body.removeChild(element);
	}
	</script>